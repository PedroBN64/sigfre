# scripts/popular_dados_teste.py
import sqlite3
import random
from datetime import datetime, timedelta
from database.db import conectar

def popular_funcionarios():
    """Popula a tabela de funcion√°rios com 78 registros de teste alinhados com a classifica√ß√£o do PDF"""
    
    # Lista de nomes realistas
    nomes_masculinos = [
        "Jo√£o Silva", "Pedro Santos", "Carlos Oliveira", "Ant√¥nio Costa", "Paulo Souza",
        "Lucas Fernandes", "Marcos Pereira", "Ricardo Almeida", "Fernando Lima", "Roberto Martins",
        "Daniel Rodrigues", "Eduardo Barbosa", "Miguel Carvalho", "Rafael Ferreira", "Bruno Rocha",
        "F√°bio Nascimento", "Gustavo Mendes", "Leonardo Duarte", "Alexandre Moreira", "Andr√© Castro",
        "S√©rgio Cardoso", "Maur√≠cio Neves", "Vin√≠cius Ramos", "Diego Pinto", "Thiago Lopes",
        "Felipe Andrade", "Rodrigo Xavier", "Juliano Teixeira", "C√©sar Moura", "M√°rcio Freitas"
    ]
    
    nomes_femininos = [
        "Maria Oliveira", "Ana Santos", "Juliana Costa", "Patr√≠cia Souza", "Camila Lima",
        "Fernanda Silva", "Amanda Pereira", "Let√≠cia Rodrigues", "Beatriz Alves", "Gabriela Martins",
        "Carolina Ferreira", "Larissa Barbosa", "Mariana Carvalho", "Isabela Rocha", "Tatiane Nascimento",
        "Vanessa Mendes", "Priscila Duarte", "J√©ssica Moreira", "Nat√°lia Castro", "D√©bora Cardoso",
        "Simone Neves", "Renata Ramos", "Cristina Pinto", "Elaine Lopes", "Sueli Andrade",
        "Luciana Xavier", "Monique Teixeira", "Viviane Moura", "Ros√¢ngela Freitas", "Adriana Santos",
        "Cl√°udia Oliveira", "Sandra Costa", "Regina Souza", "L√∫cia Lima", "T√¢nia Silva",
        "M√¥nica Pereira", "C√≠ntia Rodrigues", "Rita Alves", "Alice Martins", "Helena Ferreira",
        "Laura Barbosa", "Val√©ria Carvalho", "Irene Rocha", "Noemi Nascimento", "Elisa Mendes"
    ]
    
    # Cargos espec√≠ficos para cada grupo do PDF
    cargos_educacao_infantil = ["Professor Educa√ß√£o Infantil"]
    cargos_peb1 = [
        "Professor PEB I", 
        "Professor de Musica", 
        "Professor de ED. F√≠sica", 
        "Professor de Artes", 
        "Professor de Ingl√™s"
    ]
    cargos_outros = [
        "Coordenador Pedag√≥gico", "Diretor", "Vice-Diretor", "Secret√°rio Escolar", 
        "Auxiliar Administrativo", "Merendeira", "Servi√ßos Gerais", "Zelador", 
        "Monitor", "Bibliotec√°rio", "Psic√≥logo Escolar", "Fonoaudi√≥logo"
    ]
    
    # Todos os cargos combinados
    todos_cargos = cargos_educacao_infantil + cargos_peb1 + cargos_outros
    
    # Tipos de contrato - distribu√≠dos estrategicamente
    contratos_clt = ["CLT"]
    contratos_outros = ["Estatut√°rio", "Tempor√°rio", "Estagi√°rio"]
    
    # Cargas hor√°rias
    cargas_horarias = ["20h", "30h", "40h", "44h"]
    
    conn = conectar()
    cursor = conn.cursor()
    
    # Limpar tabela existente
    cursor.execute("DELETE FROM funcionarios")
    
    funcionarios = []
    id_counter = 1
    
    # Distribui√ß√£o estrat√©gica para criar os 5 grupos do PDF
    total_funcionarios = len(nomes_masculinos) + len(nomes_femininos)
    
    # Grupo 1: EFETIVO CLT - Professor Educa√ß√£o Infantil (15%)
    num_grupo1 = int(total_funcionarios * 0.15)
    # Grupo 2: EFETIVO CLT - Professor PEB I (20%)
    num_grupo2 = int(total_funcionarios * 0.20)
    # Grupo 3: CONTRATO - Professor Educa√ß√£o Infantil (15%)
    num_grupo3 = int(total_funcionarios * 0.15)
    # Grupo 4: CONTRATO - Professor PEB I (20%)
    num_grupo4 = int(total_funcionarios * 0.20)
    # Grupo 5: Funcion√°rios - outros cargos (30%)
    num_grupo5 = total_funcionarios - (num_grupo1 + num_grupo2 + num_grupo3 + num_grupo4)
    
    print("üìä DISTRIBUI√á√ÉO ESTRAT√âGICA DE FUNCION√ÅRIOS:")
    print(f"  ‚Ä¢ EFETIVO CLT - Professor Educa√ß√£o Infantil: {num_grupo1}")
    print(f"  ‚Ä¢ EFETIVO CLT - Professor PEB I: {num_grupo2}")
    print(f"  ‚Ä¢ CONTRATO - Professor Educa√ß√£o Infantil: {num_grupo3}")
    print(f"  ‚Ä¢ CONTRATO - Professor PEB I: {num_grupo4}")
    print(f"  ‚Ä¢ Funcion√°rios (outros cargos): {num_grupo5}")
    
    # Combinar todos os nomes
    todos_nomes = nomes_masculinos + nomes_femininos
    random.shuffle(todos_nomes)
    
    # Grupo 1: EFETIVO CLT - Professor Educa√ß√£o Infantil
    for i in range(num_grupo1):
        if i < len(todos_nomes):
            nome = todos_nomes.pop(0)
            rg = f"MG-{random.randint(10000000, 99999999)}"
            cargo = random.choice(cargos_educacao_infantil)
            contrato = "CLT"
            carga_horaria = random.choice(cargas_horarias)
            
            funcionarios.append((id_counter, nome, rg, cargo, contrato, carga_horaria))
            id_counter += 1
    
    # Grupo 2: EFETIVO CLT - Professor PEB I
    for i in range(num_grupo2):
        if i < len(todos_nomes):
            nome = todos_nomes.pop(0)
            rg = f"MG-{random.randint(10000000, 99999999)}"
            cargo = random.choice(cargos_peb1)
            contrato = "CLT"
            carga_horaria = random.choice(cargas_horarias)
            
            funcionarios.append((id_counter, nome, rg, cargo, contrato, carga_horaria))
            id_counter += 1
    
    # Grupo 3: CONTRATO - Professor Educa√ß√£o Infantil
    for i in range(num_grupo3):
        if i < len(todos_nomes):
            nome = todos_nomes.pop(0)
            rg = f"MG-{random.randint(10000000, 99999999)}"
            cargo = random.choice(cargos_educacao_infantil)
            contrato = random.choice(contratos_outros)
            carga_horaria = random.choice(cargas_horarias)
            
            funcionarios.append((id_counter, nome, rg, cargo, contrato, carga_horaria))
            id_counter += 1
    
    # Grupo 4: CONTRATO - Professor PEB I
    for i in range(num_grupo4):
        if i < len(todos_nomes):
            nome = todos_nomes.pop(0)
            rg = f"MG-{random.randint(10000000, 99999999)}"
            cargo = random.choice(cargos_peb1)
            contrato = random.choice(contratos_outros)
            carga_horaria = random.choice(cargas_horarias)
            
            funcionarios.append((id_counter, nome, rg, cargo, contrato, carga_horaria))
            id_counter += 1
    
    # Grupo 5: Funcion√°rios - outros cargos
    for i in range(num_grupo5):
        if i < len(todos_nomes):
            nome = todos_nomes.pop(0)
            rg = f"MG-{random.randint(10000000, 99999999)}"
            cargo = random.choice(cargos_outros)
            contrato = random.choice(contratos_clt + contratos_outros)  # Pode ser qualquer contrato
            carga_horaria = random.choice(cargas_horarias)
            
            funcionarios.append((id_counter, nome, rg, cargo, contrato, carga_horaria))
            id_counter += 1
    
    # Inserir no banco
    cursor.executemany(
        "INSERT INTO funcionarios (id, nome, rg, cargo, contrato, carga_horaria) VALUES (?, ?, ?, ?, ?, ?)",
        funcionarios
    )
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ {len(funcionarios)} funcion√°rios inseridos com sucesso!")
    
    # Mostrar distribui√ß√£o real
    print("\nüìà DISTRIBUI√á√ÉO REAL CRIADA:")
    conn = conectar()
    cursor = conn.cursor()
    
    # Contar por grupo
    cursor.execute("""
        SELECT 
            CASE 
                WHEN cargo = 'Professor Educa√ß√£o Infantil' AND contrato = 'CLT' THEN 'EFETIVO CLT - Professor Educa√ß√£o Infantil'
                WHEN cargo IN ('Professor PEB I', 'Professor de Musica', 'Professor de ED. F√≠sica', 'Professor de Artes', 'Professor de Ingl√™s') AND contrato = 'CLT' THEN 'EFETIVO CLT - Professor PEB I'
                WHEN cargo = 'Professor Educa√ß√£o Infantil' AND contrato != 'CLT' THEN 'CONTRATO - Professor Educa√ß√£o Infantil'
                WHEN cargo IN ('Professor PEB I', 'Professor de Musica', 'Professor de ED. F√≠sica', 'Professor de Artes', 'Professor de Ingl√™s') AND contrato != 'CLT' THEN 'CONTRATO - Professor PEB I'
                ELSE 'Funcion√°rios'
            END as grupo,
            COUNT(*) as quantidade
        FROM funcionarios 
        GROUP BY grupo
        ORDER BY grupo
    """)
    
    distribuicao_real = cursor.fetchall()
    for grupo, quantidade in distribuicao_real:
        print(f"  ‚Ä¢ {grupo}: {quantidade}")
    
    conn.close()
    
    return [f[0] for f in funcionarios]  # Retorna lista de IDs

def popular_faltas(funcionario_ids, mes=8, ano=2024):
    """Popula a tabela de frequ√™ncia com faltas variadas"""
    
    # Justificativas dispon√≠veis
    justificativas = ["AM", "AB", "TRE", "SOL", "INJ", "FH", "Folga Anivers√°rio", "Atestado", "Falta Justificada", "Licen√ßa-Pr√™mio"]
    
    conn = conectar()
    cursor = conn.cursor()
    
    # Limpar tabela existente (opcional)
    cursor.execute("DELETE FROM frequencia")
    
    # Verificar se coluna detalhes existe
    try:
        cursor.execute("PRAGMA table_info(frequencia)")
        colunas = [col[1] for col in cursor.fetchall()]
        if 'detalhes' not in colunas:
            cursor.execute("ALTER TABLE frequencia ADD COLUMN detalhes TEXT")
    except:
        pass
    
    total_faltas = 0
    ultimo_dia = 31 if mes in [1, 3, 5, 7, 8, 10, 12] else 30
    
    for func_id in funcionario_ids:
        # Definir probabilidade de ter faltas (80% dos funcion√°rios ter√£o faltas)
        if random.random() > 0.2:
            # N√∫mero de faltas para este funcion√°rio (1 a 8 faltas)
            num_faltas = random.randint(1, 8)
            
            dias_com_falta = random.sample(range(1, ultimo_dia + 1), num_faltas)
            
            for dia in dias_com_falta:
                data = f"{dia:02d}/{mes:02d}/{ano}"
                justificativa = random.choice(justificativas)
                detalhes = None
                
                # Adicionar detalhes espec√≠ficos para algumas justificativas
                if justificativa == "FH":
                    # Gerar horas de falta
                    horas = random.choice([1, 2, 3, 4])
                    minutos = random.choice([0, 15, 30, 45])
                    if minutos > 0:
                        detalhes = f"{horas}h{minutos}min"
                    else:
                        detalhes = f"{horas}h"
                
                elif justificativa == "Licen√ßa-Pr√™mio":
                    # Licen√ßa de 3 a 10 dias
                    duracao = random.randint(3, 10)
                    data_inicio = datetime(ano, mes, dia)
                    data_fim = data_inicio + timedelta(days=duracao-1)
                    detalhes = f"{data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}"
                    # Para licen√ßa, marcar apenas o primeiro dia
                
                elif justificativa == "Folga Anivers√°rio":
                    # Folga no dia do anivers√°rio (gerar data aleat√≥ria no m√™s)
                    dia_aniversario = random.randint(1, ultimo_dia)
                    data = f"{dia_aniversario:02d}/{mes:02d}/{ano}"
                
                # Inserir falta
                cursor.execute(
                    "INSERT INTO frequencia (funcionario_id, data, justificativa, detalhes) VALUES (?, ?, ?, ?)",
                    (func_id, data, justificativa, detalhes)
                )
                total_faltas += 1
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ {total_faltas} faltas inseridas com sucesso!")

def popular_justificativas_personalizadas():
    """Popula justificativas personalizadas no banco"""
    justificativas_personalizadas = [
        "Curso de Capacita√ß√£o", "Viagem a Servi√ßo", "Problemas Familiares", 
        "Consulta M√©dica", "Exames", "Doa√ß√£o de Sangue", "Casamento",
        "Nascimento de Filho", "Falecimento Familiar", "Acompanhamento Familiar"
    ]
    
    conn = conectar()
    cursor = conn.cursor()
    
    # Criar tabela se n√£o existir
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS justificativas_personalizadas (
            id INTEGER PRIMARY KEY,
            nome TEXT UNIQUE
        )
    """)
    
    # Limpar e popular
    cursor.execute("DELETE FROM justificativas_personalizadas")
    
    for i, justificativa in enumerate(justificativas_personalizadas, 1):
        cursor.execute(
            "INSERT OR IGNORE INTO justificativas_personalizadas (id, nome) VALUES (?, ?)",
            (i, justificativa)
        )
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ {len(justificativas_personalizadas)} justificativas personalizadas inseridas!")

def gerar_relatorio_estatisticas():
    """Gera um relat√≥rio com estat√≠sticas dos dados inseridos"""
    conn = conectar()
    cursor = conn.cursor()
    
    # Estat√≠sticas de funcion√°rios
    cursor.execute("SELECT COUNT(*) FROM funcionarios")
    total_funcionarios = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(DISTINCT cargo) FROM funcionarios")
    total_cargos = cursor.fetchone()[0]
    
    # Estat√≠sticas de faltas
    cursor.execute("SELECT COUNT(*) FROM frequencia")
    total_faltas = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(DISTINCT funcionario_id) FROM frequencia")
    funcionarios_com_falta = cursor.fetchone()[0]
    
    cursor.execute("""
        SELECT justificativa, COUNT(*) as quantidade 
        FROM frequencia 
        GROUP BY justificativa 
        ORDER BY quantidade DESC
    """)
    distribuicao_justificativas = cursor.fetchall()
    
    # Distribui√ß√£o por grupos do PDF
    cursor.execute("""
        SELECT 
            CASE 
                WHEN cargo = 'Professor Educa√ß√£o Infantil' AND contrato = 'CLT' THEN 'EFETIVO CLT - Professor Educa√ß√£o Infantil'
                WHEN cargo IN ('Professor PEB I', 'Professor de Musica', 'Professor de ED. F√≠sica', 'Professor de Artes', 'Professor de Ingl√™s') AND contrato = 'CLT' THEN 'EFETIVO CLT - Professor PEB I'
                WHEN cargo = 'Professor Educa√ß√£o Infantil' AND contrato != 'CLT' THEN 'CONTRATO - Professor Educa√ß√£o Infantil'
                WHEN cargo IN ('Professor PEB I', 'Professor de Musica', 'Professor de ED. F√≠sica', 'Professor de Artes', 'Professor de Ingl√™s') AND contrato != 'CLT' THEN 'CONTRATO - Professor PEB I'
                ELSE 'Funcion√°rios'
            END as grupo,
            COUNT(*) as quantidade
        FROM funcionarios 
        GROUP BY grupo
        ORDER BY grupo
    """)
    distribuicao_grupos = cursor.fetchall()
    
    conn.close()
    
    print("\n" + "="*60)
    print("üìä RELAT√ìRIO DE ESTAT√çSTICAS - DADOS DE TESTE")
    print("="*60)
    print(f"üë• Total de funcion√°rios: {total_funcionarios}")
    print(f"üíº Cargos distintos: {total_cargos}")
    print(f"üìÖ Total de faltas registradas: {total_faltas}")
    print(f"üéØ Funcion√°rios com faltas: {funcionarios_com_falta}")
    print(f"üìà M√©dia de faltas por funcion√°rio: {total_faltas/total_funcionarios:.1f}")
    
    print("\nüè∑Ô∏è  Distribui√ß√£o por grupos do PDF:")
    for grupo, quantidade in distribuicao_grupos:
        percentual = (quantidade / total_funcionarios) * 100
        print(f"   ‚Ä¢ {grupo}: {quantidade} ({percentual:.1f}%)")
    
    print("\nüìã Distribui√ß√£o de justificativas:")
    for justificativa, quantidade in distribuicao_justificativas:
        percentual = (quantidade / total_faltas) * 100
        print(f"   ‚Ä¢ {justificativa}: {quantidade} ({percentual:.1f}%)")
    print("="*60)

def executar_populacao_completa():
    """Executa toda a popula√ß√£o de dados de teste"""
    print("üöÄ INICIANDO POPULA√á√ÉO DE DADOS DE TESTE...")
    print()
    
    # 1. Popular funcion√°rios
    print("1. Populando tabela de funcion√°rios...")
    funcionario_ids = popular_funcionarios()
    
    # 2. Popular justificativas personalizadas
    print("\n2. Populando justificativas personalizadas...")
    popular_justificativas_personalizadas()
    
    # 3. Popular faltas
    print("\n3. Populando tabela de frequ√™ncia...")
    popular_faltas(funcionario_ids)
    
    # 4. Gerar relat√≥rio
    print("\n4. Gerando relat√≥rio estat√≠stico...")
    gerar_relatorio_estatisticas()
    
    print("\nüéâ POPULA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("üìÑ Agora voc√™ pode gerar o PDF para testar com dados realistas.")

# Para executar diretamente
if __name__ == "__main__":
    executar_populacao_completa()