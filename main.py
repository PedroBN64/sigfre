import customtkinter as ctk
import sys
import traceback

def excecao_global(exctype, value, tb):
    """Captura exce√ß√µes globais para evitar crashes"""
    if "bad window path name" in str(value):
        print("‚ö†Ô∏è  Aviso: Janela j√° foi fechada, ignorando erro de foco...")
        return
    print("‚ùå Exce√ß√£o n√£o tratada:")
    traceback.print_exception(exctype, value, tb)

# Configurar handler global de exce√ß√µes
sys.excepthook = excecao_global

# ========== CONFIGURA√á√ïES DE PERFORMANCE ==========
# Configurar CustomTkinter para melhor performance
try:
    ctk.deactivate_automatic_dpi_awareness()  # Melhora performance em monitores HiDPI
except:
    pass  # Ignora se n√£o estiver dispon√≠vel

ctk.set_widget_scaling(1.0)  # Escala fixa para melhor performance
ctk.set_window_scaling(1.0)

# Configurar apar√™ncia
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

if __name__ == "__main__":
    try:
        print("üöÄ Iniciando SIGFRE...")
        
        # Criar janela principal
        root = ctk.CTk()
        
        # Configura√ß√µes b√°sicas da janela
        root.title("SIGFRE - Sistema de Folha")
        root.geometry("1100x700")
        root.minsize(1000, 600)
        
        # Centralizar na tela
        root.update_idletasks()
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        window_width = 1100
        window_height = 700
        
        x = (screen_width // 2) - (window_width // 2)
        y = (screen_height // 2) - (window_height // 2)
        
        root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        print("‚úÖ Janela principal criada...")
        
        # Importar e criar tela principal DENTRO do try para capturar erros
        try:
            from views.tela_principal import criar_tela_principal
            print("‚úÖ M√≥dulos carregados...")
            criar_tela_principal(root)
            print("‚úÖ Tela principal criada com sucesso!")
        except Exception as e:
            print(f"‚ùå Erro ao carregar tela principal: {e}")
            traceback.print_exc()
            # Mostrar mensagem de erro ao usu√°rio
            import tkinter.messagebox as tk_messagebox
            tk_messagebox.showerror("Erro", f"Erro ao carregar interface:\n{str(e)}")
            sys.exit(1)
        
        # Configurar fechamento
        def fechar_aplicacao():
            """Fecha a aplica√ß√£o de forma otimizada"""
            try:
                print("üëã Encerrando SIGFRE...")
                root.quit()
                root.destroy()
            except Exception as e:
                print(f"‚ö†Ô∏è  Aviso ao fechar: {e}")
        
        root.protocol("WM_DELETE_WINDOW", fechar_aplicacao)
        
        print("üéâ SIGFRE carregado com sucesso! Iniciando interface...")
        
        # Iniciar loop principal
        root.mainloop()
        
        print("üëã SIGFRE encerrado.")
        
    except KeyboardInterrupt:
        print("\nüõë Aplica√ß√£o interrompida pelo usu√°rio")
        
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico ao iniciar aplica√ß√£o: {e}")
        traceback.print_exc()
        
        # Tentar mostrar mensagem de erro mesmo com falha na interface
        try:
            import tkinter.messagebox as tk_messagebox
            tk_messagebox.showerror("Erro Cr√≠tico", 
                                  f"Erro ao iniciar SIGFRE:\n{str(e)}\n\nVerifique o console para detalhes.")
        except:
            print("N√£o foi poss√≠vel mostrar mensagem de erro gr√°fica.")
            
        sys.exit(1)